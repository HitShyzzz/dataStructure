package leecode.动态规划;

import javax.swing.text.MaskFormatter;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 *
 * @Author: shy
 * @Date: 2022/06/22/18:27
 * @Description:
 */
public class 最长有效括号 {
    public static void main(String[] args) {
        String s = "()()()(()))()()())))((()()()(()()))(()()()((()()))())(((())()())(()(()(()(())(((()())()))(()))()))))()())(()))))()()(())()()((())()()))))((()))))(()()((()(()(()())((())()()()()))()()()(())()()())((((()(())())))(((()(((()((((())())(()()()()(((((()))()(()(())))(((()()()()(()(((())(()(()()(()(()(())()))))))()))()())((()((((()(())(()()()(((((()())()))))())))((((()()()(()(())(((())(((()()((()((()(((()(()))(((())(((()((((()(())(((()((()(()())))))(()(()()(())))))()(()()((()))()))())())((())))()(())((((()((()))))()())()))((()(()())()())()()((()))())(()(()(())((((((()()((((())))())(((()()())))()(((()(()()((((())))))()()((((()(()()())(()(())()()()((()(()((((())))((((((())(()())()))))(()(()))()))))))(()()((()()()())(())))(((()))(()()()(()))((())()()()())()()(((())(()(())()()(()())((()()(((((())(()((((()(()()()(()))(()((((())()())()())())))())(((()(()((())()()((((()()()()))))))())())()(((((()())()(()()()()()(((())((((((()))(())()(()())(()(()())(()(())))())))(()()(()((((()()(())(()))()))(()))(()())())()))))))()()(())))))()))()(()())))((())(()()))()((()))()(())()()((((())()))((()(()))()(((()())()(()()((()())((((())()))))()(())())())())(((()(()())))((()))))()())))))(()((())))()())((()))()()))(())())()))()()((()(((())()()()((()()(()(())(()))())())(((()())(()())(()((()()()())()(()(((((((()()(((()(((((((())(()))))())()))))))))()(()(()((((())(()()(((()))()(())(((((((((()(()())())()(((()((()(((()(()()(()))(())))))))(((";
        int longestValidParentheses = longestValidParentheses(s);
        System.out.println(longestValidParentheses);
    }

    /**
     * 最直接的做法，列出s的所有子串，如果子串是有效的，那么就更新结果，最终结果为所有结果的最大值；
     * 时间复杂度是指数级的，会超时！
     * @param s
     * @return
     */
    public static int longestValidParentheses(String s) {
        int ans = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == '(' && s.charAt(j) == ')' && (j - i + 1) % 2 == 0 && isValid(s.substring(i, j + 1))) {
                    ans = Math.max(ans, j + 1 - i);
                }
            }
        }
        return ans;
    }

    /**
     * 判断字符串s是否有效
     * 思路就是后加入的左括号先闭合！因此我们使用栈这种数据结构
     * 栈中只加入左括号，然后把栈顶元素和当前元素进行比对，
     *
     * @param s
     * @return
     */
    public static boolean isValid(String s) {
        if (s.length() % 2 != 0) {
            return false;
        }
        Map<Character, Character> map = new HashMap<>();
        map.put(')', '(');
        Deque<Character> stack = new ArrayDeque<>();
        char[] c = s.toCharArray();
        for (int i = 0; i < s.length(); i++) {
            if (map.containsKey(c[i])) {// 此时是右括号，需要比对
                if (stack.isEmpty() || stack.peek() != map.get(c[i])) {
                    return false;
                }
                stack.pop();
            } else {// 是左括号，就入栈
                stack.push(c[i]);
            }
        }
        return stack.isEmpty();
    }
}
